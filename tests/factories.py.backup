"""
Test data factories for MCP ecosystem components.

This module provides factory classes for creating test data using the
factory_boy library. These factories create consistent, realistic test
data for models, analysis results, and other data structures.
"""

import factory
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import random
import uuid
from pathlib import Path

# Try to import the actual model classes, fall back to dicts if not available
try:
    from mcp_shared_lib.models.base_models import BaseModel, AnalysisResult
    from mcp_shared_lib.models.git_models import GitCommit, FileChange, RepositoryInfo
    HAS_MODELS = True
except ImportError:
    HAS_MODELS = False
    # Define placeholder classes for when models aren't available
    class BaseModel:
        def __init__(self, **kwargs):
            for key, value in kwargs.items():
                setattr(self, key, value)

    class AnalysisResult(BaseModel):
        pass

    class GitCommit(BaseModel):
        pass

    class FileChange(BaseModel):
        pass

    class RepositoryInfo(BaseModel):
        pass


class Faker:
    """Simple faker implementation when factory_boy's Faker is not available."""

    @staticmethod
    def sentence(nb_words=6):
        words = ['test', 'sample', 'example', 'data', 'factory', 'mock', 'dummy', 'placeholder']
        return ' '.join(random.choices(words, k=nb_words)).capitalize()

    @staticmethod
    def name():
        first_names = ['John', 'Jane', 'Bob', 'Alice', 'Charlie', 'Diana', 'Eve', 'Frank']
        last_names = ['Doe', 'Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia', 'Miller']
        return f"{random.choice(first_names)} {random.choice(last_names)}"

    @staticmethod
    def email():
        domains = ['example.com', 'test.org', 'sample.net', 'demo.io']
        names = ['user', 'test', 'demo', 'sample']
        return f"{random.choice(names)}{random.randint(1, 999)}@{random.choice(domains)}"

    @staticmethod
    def file_path(depth=2, extension='py'):
        paths = ['src', 'tests', 'docs', 'config', 'utils', 'models', 'services', 'tools']
        files = ['main', 'utils', 'config', 'test_main', 'helpers', 'models', 'client']

        parts = [random.choice(paths) for _ in range(depth)]
        filename = f"{random.choice(files)}.{extension}"
        return str(Path(*parts, filename))

    @staticmethod
    def date_time():
        base = datetime.now()
        offset = timedelta(days=random.randint(-30, 0), hours=random.randint(-23, 0))
        return base + offset

    @staticmethod
    def random_int(min=0, max=100):
        return random.randint(min, max)

    @staticmethod
    def pyfloat(min_value=0.0, max_value=1.0):
        return random.uniform(min_value, max_value)

    @staticmethod
    def text(max_nb_chars=200):
        return "Sample text content for testing purposes. " * (max_nb_chars // 50 + 1)

    @staticmethod
    def url():
        domains = ['github.com', 'gitlab.com', 'bitbucket.org']
        users = ['testuser', 'sampleorg', 'democompany']
        repos = ['test-repo', 'sample-project', 'demo-app']
        return f"https://{random.choice(domains)}/{random.choice(users)}/{random.choice(repos)}.git"


# Base factory class
class BaseFactory:
    """Base factory for creating test objects."""

    @classmethod
    def create(cls, **kwargs):
        """Create an instance with optional overrides."""
        # Get default values
        defaults = {}
        for attr_name in dir(cls):
            if not attr_name.startswith('_') and attr_name not in ['create', 'build']:
                attr_value = getattr(cls, attr_name)
                if callable(attr_value):
                    defaults[attr_name] = attr_value()
                else:
                    defaults[attr_name] = attr_value

        # Override with provided kwargs
        defaults.update(kwargs)

        # Create the object
        if hasattr(cls, '_model'):
            return cls._model(**defaults)
        else:
            # Return a dict if no model class is specified
            return defaults

    @classmethod
    def build(cls, **kwargs):
        """Alias for create method."""
        return cls.create(**kwargs)


class GitCommitFactory(BaseFactory):
    """Factory for creating GitCommit test data."""
    _model = GitCommit if HAS_MODELS else None

    @staticmethod
    def hash():
        return f"{uuid.uuid4().hex[:8]}{uuid.uuid4().hex[:8]}"

    @staticmethod
    def message():
        prefixes = ['feat:', 'fix:', 'docs:', 'style:', 'refactor:', 'test:', 'chore:']
        actions = ['add', 'update', 'remove', 'fix', 'improve', 'implement']
        subjects = ['user authentication', 'data processing', 'error handling',
                   'API endpoints', 'test coverage', 'documentation', 'configuration']

        prefix = random.choice(prefixes)
        action = random.choice(actions)
        subject = random.choice(subjects)
        return f"{prefix} {action} {subject}"

    @staticmethod
    def author():
        return Faker.name()

    @staticmethod
    def email():
        return Faker.email()

    @staticmethod
    def timestamp():
        return Faker.date_time()

    @staticmethod
    def files_changed():
        files = [
            Faker.file_path(extension='py'),
            Faker.file_path(extension='js'),
            Faker.file_path(extension='md'),
        ]
        return random.sample(files, random.randint(1, len(files)))


class FileChangeFactory(BaseFactory):
    """Factory for creating FileChange test data."""
    _model = FileChange if HAS_MODELS else None

    @staticmethod
    def file_path():
        return Faker.file_path()

    @staticmethod
    def change_type():
        return random.choice(['modified', 'added', 'deleted', 'renamed'])

    @staticmethod
    def lines_added():
        return Faker.random_int(min=0, max=200)

    @staticmethod
    def lines_removed():
        return Faker.random_int(min=0, max=100)

    @staticmethod
    def risk_score():
        return Faker.pyfloat(min_value=0.0, max_value=1.0)

    @staticmethod
    def complexity_change():
        return Faker.random_int(min=-5, max=15)

    @staticmethod
    def size_bytes():
        return Faker.random_int(min=100, max=50000)

    @staticmethod
    def test_coverage():
        return Faker.pyfloat(min_value=0.0, max_value=1.0)


class RepositoryInfoFactory(BaseFactory):
    """Factory for creating RepositoryInfo test data."""
    _model = RepositoryInfo if HAS_MODELS else None

    @staticmethod
    def path():
        return str(Path("/test/repos") / f"repo_{uuid.uuid4().hex[:8]}")

    @staticmethod
    def name():
        prefixes = ['test', 'sample', 'demo', 'example']
        types = ['app', 'service', 'library', 'tool', 'api']
        return f"{random.choice(prefixes)}-{random.choice(types)}"

    @staticmethod
    def remote_url():
        return Faker.url()

    @staticmethod
    def current_branch():
        types = ['feature', 'bugfix', 'hotfix', 'release']
        names = ['auth', 'api', 'ui', 'database', 'performance', 'security']
        return f"{random.choice(types)}/{random.choice(names)}-{random.randint(1, 999)}"

    @staticmethod
    def default_branch():
        return random.choice(['main', 'master', 'develop'])

    @staticmethod
    def is_dirty():
        return random.choice([True, False])

    @staticmethod
    def ahead_by():
        return Faker.random_int(min=0, max=10)

    @staticmethod
    def behind_by():
        return Faker.random_int(min=0, max=5)


class AnalysisResultFactory(BaseFactory):
    """Factory for creating AnalysisResult test data."""
    _model = AnalysisResult if HAS_MODELS else None

    @staticmethod
    def timestamp():
        return Faker.date_time()

    @staticmethod
    def status():
        return random.choice(['success', 'warning', 'error', 'partial'])

    @staticmethod
    def summary():
        return Faker.sentence(nb_words=8)

    @staticmethod
    def details():
        return {
            "total_files_analyzed": Faker.random_int(min=1, max=100),
            "files_with_issues": Faker.random_int(min=0, max=20),
            "average_complexity": Faker.pyfloat(min_value=1.0, max_value=20.0),
            "test_coverage_percentage": Faker.pyfloat(min_value=0.0, max_value=100.0),
            "execution_time_ms": Faker.random_int(min=100, max=5000)
        }

    @staticmethod
    def risk_assessment():
        return {
            "overall_risk": Faker.pyfloat(min_value=0.0, max_value=1.0),
            "risk_factors": {
                "large_changes": random.choice([True, False]),
                "config_modifications": random.choice([True, False]),
                "new_dependencies": random.choice([True, False]),
                "database_changes": random.choice([True, False])
            },
            "high_risk_files": [
                Faker.file_path() for _ in range(random.randint(0, 3))
            ]
        }


class PRRecommendationFactory(BaseFactory):
    """Factory for creating PR recommendation test data."""

    @staticmethod
    def title():
        types = ['feat', 'fix', 'docs', 'refactor', 'test']
        actions = ['Add', 'Update', 'Remove', 'Fix', 'Improve', 'Implement']
        subjects = ['user authentication', 'API endpoints', 'data validation',
                   'error handling', 'test coverage', 'documentation']

        return f"{random.choice(actions)} {random.choice(subjects)}"

    @staticmethod
    def description():
        return Faker.text(max_nb_chars=300)

    @staticmethod
    def files():
        file_count = random.randint(1, 8)
        return [Faker.file_path() for _ in range(file_count)]

    @staticmethod
    def estimated_size():
        return random.choice(['small', 'medium', 'large'])

    @staticmethod
    def priority():
        return random.choice(['low', 'medium', 'high', 'critical'])

    @staticmethod
    def risk_level():
        return random.choice(['low', 'medium', 'high'])

    @staticmethod
    def reviewers():
        reviewer_count = random.randint(1, 3)
        return [Faker.name() for _ in range(reviewer_count)]

    @staticmethod
    def labels():
        all_labels = ['feature', 'bugfix', 'enhancement', 'documentation',
                     'testing', 'refactoring', 'security', 'performance']
        label_count = random.randint(1, 4)
        return random.sample(all_labels, label_count)


class MCPToolResultFactory(BaseFactory):
    """Factory for creating MCP tool execution results."""

    @staticmethod
    def status():
        return random.choice(['success', 'error', 'timeout', 'partial'])

    @staticmethod
    def execution_time_ms():
        return Faker.random_int(min=10, max=5000)

    @staticmethod
    def data():
        return {
            "result": Faker.sentence(),
            "metadata": {
                "version": "1.0.0",
                "timestamp": Faker.date_time().isoformat()
            },
            "metrics": {
                "processing_time": Faker.random_int(min=1, max=1000),
                "memory_usage": Faker.random_int(min=1024, max=102400)
            }
        }

    @staticmethod
    def error():
        error_types = ['ValidationError', 'NetworkError', 'TimeoutError', 'AuthenticationError']
        return {
            "type": random.choice(error_types),
            "message": Faker.sentence(),
            "code": random.randint(1000, 9999)
        } if random.choice([True, False]) else None


class GitRepositoryStateFactory(BaseFactory):
    """Factory for creating git repository state test data."""

    @staticmethod
    def modified_files():
        count = random.randint(0, 10)
        return [Faker.file_path() for _ in range(count)]

    @staticmethod
    def untracked_files():
        count = random.randint(0, 5)
        return [Faker.file_path() for _ in range(count)]

    @staticmethod
    def staged_files():
        count = random.randint(0, 8)
        return [Faker.file_path() for _ in range(count)]

    @staticmethod
    def deleted_files():
        count = random.randint(0, 3)
        return [Faker.file_path() for _ in range(count)]

    @staticmethod
    def conflicts():
        count = random.randint(0, 2)
        return [Faker.file_path() for _ in range(count)]

    @staticmethod
    def stashes():
        count = random.randint(0, 3)
        return [
            {
                "index": i,
                "message": f"WIP: {Faker.sentence(nb_words=4)}",
                "timestamp": Faker.date_time()
            }
            for i in range(count)
        ]

    @staticmethod
    def unpushed_commits():
        count = random.randint(0, 5)
        return [GitCommitFactory.create() for _ in range(count)]


# Convenience functions for creating collections
def create_file_changes(count: int = 3, **kwargs) -> List[Dict]:
    """Create a list of file changes."""
    return [FileChangeFactory.create(**kwargs) for _ in range(count)]


def create_commits(count: int = 5, **kwargs) -> List[Dict]:
    """Create a list of git commits."""
    return [GitCommitFactory.create(**kwargs) for _ in range(count)]


def create_pr_recommendations(count: int = 3, **kwargs) -> List[Dict]:
    """Create a list of PR recommendations."""
    return [PRRecommendationFactory.create(**kwargs) for _ in range(count)]


def create_analysis_results(count: int = 1, **kwargs) -> List[Dict]:
    """Create a list of analysis results."""
    return [AnalysisResultFactory.create(**kwargs) for _ in range(count)]


def create_repository_info(**kwargs) -> Dict:
    """Create repository information."""
    return RepositoryInfoFactory.create(**kwargs)


def create_git_state(**kwargs) -> Dict:
    """Create git repository state."""
    return GitRepositoryStateFactory.create(**kwargs)


# Specialized factory functions for common test scenarios
class TestScenarioFactory:
    """Factory for creating common test scenarios."""

    @staticmethod
    def clean_repository():
        """Create a clean repository state."""
        return GitRepositoryStateFactory.create(
            modified_files=[],
            untracked_files=[],
            staged_files=[],
            deleted_files=[],
            conflicts=[],
            stashes=[]
        )

    @staticmethod
    def dirty_repository():
        """Create a repository with many changes."""
        return GitRepositoryStateFactory.create(
            modified_files=[Faker.file_path() for _ in range(8)],
            untracked_files=[Faker.file_path() for _ in range(3)],
            staged_files=[Faker.file_path() for _ in range(5)],
            deleted_files=[Faker.file_path() for _ in range(2)],
            conflicts=[],
            stashes=[
                {
                    "index": 0,
                    "message": "WIP: experimental changes",
                    "timestamp": Faker.date_time()
                }
            ]
        )

    @staticmethod
    def high_risk_changes():
        """Create high-risk file changes."""
        return [
            FileChangeFactory.create(
                file_path="config/production.json",
                change_type="modified",
                risk_score=0.95,
                lines_added=10,
                lines_removed=5
            ),
            FileChangeFactory.create(
                file_path="src/core/auth.py",
                change_type="modified",
                risk_score=0.85,
                lines_added=50,
                lines_removed=10
            ),
            FileChangeFactory.create(
                file_path="migrations/0001_initial.sql",
                change_type="added",
                risk_score=0.90,
                lines_added=200,
                lines_removed=0
            )
        ]

    @staticmethod
    def low_risk_changes():
        """Create low-risk file changes."""
        return [
            FileChangeFactory.create(
                file_path="README.md",
                change_type="modified",
                risk_score=0.1,
                lines_added=5,
                lines_removed=2
            ),
            FileChangeFactory.create(
                file_path="docs/api.md",
                change_type="added",
                risk_score=0.05,
                lines_added=30,
                lines_removed=0
            ),
            FileChangeFactory.create(
                file_path="tests/test_utils.py",
                change_type="modified",
                risk_score=0.2,
                lines_added=15,
                lines_removed=3
            )
        ]

    @staticmethod
    def feature_development_scenario():
        """Create a typical feature development scenario."""
        return {
            "repository_state": GitRepositoryStateFactory.create(
                modified_files=["src/models/user.py", "src/services/auth.py"],
                untracked_files=["src/features/new_auth.py"],
                staged_files=["tests/test_auth.py", "docs/auth_api.md"],
                deleted_files=[],
                conflicts=[]
            ),
            "file_changes": [
                FileChangeFactory.create(
                    file_path="src/models/user.py",
                    change_type="modified",
                    risk_score=0.4,
                    lines_added=25,
                    lines_removed=5
                ),
                FileChangeFactory.create(
                    file_path="src/services/auth.py",
                    change_type="modified",
                    risk_score=0.6,
                    lines_added=80,
                    lines_removed=20
                ),
                FileChangeFactory.create(
                    file_path="src/features/new_auth.py",
                    change_type="added",
                    risk_score=0.5,
                    lines_added=150,
                    lines_removed=0
                )
            ],
            "expected_prs": [
                PRRecommendationFactory.create(
                    title="Add new authentication features",
                    files=["src/features/new_auth.py", "tests/test_auth.py"],
                    estimated_size="medium",
                    risk_level="medium"
                ),
                PRRecommendationFactory.create(
                    title="Update user model and auth service",
                    files=["src/models/user.py", "src/services/auth.py"],
                    estimated_size="small",
                    risk_level="medium"
                )
            ]
        }

    @staticmethod
    def bug_fix_scenario():
        """Create a typical bug fix scenario."""
        return {
            "repository_state": GitRepositoryStateFactory.create(
                modified_files=["src/utils/helpers.py", "tests/test_helpers.py"],
                untracked_files=[],
                staged_files=[],
                deleted_files=[],
                conflicts=[]
            ),
            "file_changes": [
                FileChangeFactory.create(
                    file_path="src/utils/helpers.py",
                    change_type="modified",
                    risk_score=0.3,
                    lines_added=5,
                    lines_removed=8
                ),
                FileChangeFactory.create(
                    file_path="tests/test_helpers.py",
                    change_type="modified",
                    risk_score=0.1,
                    lines_added=20,
                    lines_removed=2
                )
            ],
            "expected_prs": [
                PRRecommendationFactory.create(
                    title="Fix helper function edge case",
                    files=["src/utils/helpers.py", "tests/test_helpers.py"],
                    estimated_size="small",
                    risk_level="low"
                )
            ]
        }

    @staticmethod
    def refactoring_scenario():
        """Create a large refactoring scenario."""
        return {
            "repository_state": GitRepositoryStateFactory.create(
                modified_files=[f"src/models/{name}.py" for name in ["user", "product", "order"]],
                untracked_files=["src/models/base.py"],
                staged_files=["tests/test_models.py"],
                deleted_files=["src/legacy/old_models.py"],
                conflicts=[]
            ),
            "file_changes": [
                FileChangeFactory.create(
                    file_path=f"src/models/{name}.py",
                    change_type="modified",
                    risk_score=0.6,
                    lines_added=40,
                    lines_removed=30
                ) for name in ["user", "product", "order"]
            ] + [
                FileChangeFactory.create(
                    file_path="src/models/base.py",
                    change_type="added",
                    risk_score=0.4,
                    lines_added=100,
                    lines_removed=0
                )
            ],
            "expected_prs": [
                PRRecommendationFactory.create(
                    title="Refactor model inheritance structure",
                    files=["src/models/base.py", "src/models/user.py"],
                    estimated_size="medium",
                    risk_level="medium"
                ),
                PRRecommendationFactory.create(
                    title="Update product and order models",
                    files=["src/models/product.py", "src/models/order.py"],
                    estimated_size="medium",
                    risk_level="medium"
                )
            ]
        }


class MockDataBuilder:
    """Builder class for creating complex mock data structures."""

    def __init__(self):
        self.data = {}

    def with_repository(self, **kwargs):
        """Add repository information."""
        self.data['repository'] = RepositoryInfoFactory.create(**kwargs)
        return self

    def with_git_state(self, **kwargs):
        """Add git state information."""
        self.data['git_state'] = GitRepositoryStateFactory.create(**kwargs)
        return self

    def with_file_changes(self, count=3, **kwargs):
        """Add file changes."""
        self.data['file_changes'] = create_file_changes(count, **kwargs)
        return self

    def with_commits(self, count=5, **kwargs):
        """Add commit history."""
        self.data['commits'] = create_commits(count, **kwargs)
        return self

    def with_analysis_result(self, **kwargs):
        """Add analysis result."""
        self.data['analysis_result'] = AnalysisResultFactory.create(**kwargs)
        return self

    def with_pr_recommendations(self, count=3, **kwargs):
        """Add PR recommendations."""
        self.data['pr_recommendations'] = create_pr_recommendations(count, **kwargs)
        return self

    def with_tool_results(self, tools=None, **kwargs):
        """Add tool execution results."""
        if tools is None:
            tools = ['analyze_changes', 'check_push_readiness', 'recommend_prs']

        self.data['tool_results'] = {
            tool: MCPToolResultFactory.create(**kwargs)
            for tool in tools
        }
        return self

    def build(self):
        """Build and return the complete data structure."""
        return self.data.copy()


# Export all factories and utilities
__all__ = [
    # Factory classes
    'GitCommitFactory',
    'FileChangeFactory',
    'RepositoryInfoFactory',
    'AnalysisResultFactory',
    'PRRecommendationFactory',
    'MCPToolResultFactory',
    'GitRepositoryStateFactory',
    'TestScenarioFactory',
    'MockDataBuilder',

    # Convenience functions
    'create_file_changes',
    'create_commits',
    'create_pr_recommendations',
    'create_analysis_results',
    'create_repository_info',
    'create_git_state',

    # Utility classes
    'BaseFactory',
    'Faker'
]


# Example usage functions for documentation
def example_usage():
    """
    Example usage of the test factories.

    This function demonstrates how to use the various factories
    to create test data for different scenarios.
    """

    # Create a single commit
    commit = GitCommitFactory.create()

    # Create a commit with specific values
    custom_commit = GitCommitFactory.create(
        message="feat: add user authentication",
        author="John Doe"
    )

    # Create multiple file changes
    changes = create_file_changes(count=5)

    # Create a complete test scenario
    scenario = TestScenarioFactory.feature_development_scenario()

    # Use the builder pattern for complex data
    test_data = (MockDataBuilder()
                .with_repository(name="test-repo")
                .with_git_state()
                .with_file_changes(count=3)
                .with_analysis_result(status="success")
                .build())

    return {
        'commit': commit,
        'custom_commit': custom_commit,
        'changes': changes,
        'scenario': scenario,
        'test_data': test_data
    }


if __name__ == "__main__":
    # Demo the factories
    examples = example_usage()
    print("Factory examples created successfully!")
    print(f"Commit: {examples['commit']}")
    print(f"Test data keys: {list(examples['test_data'].keys())}")
