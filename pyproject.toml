[tool.poetry]
name = "mcp-shared-lib"
version = "0.1.0"
description = "Shared library for MCP components providing common utilities, models, and tools"
authors = ["Manav Gupta <manavg@gmail.com>"]
readme = "README.md"
packages = [
    {include = "mcp_shared_lib", from = "src"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.9"
pydantic = "^2.5.0"
typing-extensions = "^4.8.0"
pathlib = "^1.0.1"
fastapi = "^0.116.1"
sse-starlette = "^2.4.1"
uvicorn = "^0.35.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-benchmark = "^4.0.0"
pytest-timeout = "^2.2.0"
pytest-randomly = "^3.15.0"
pytest-clarity = "^1.0.1"
factory-boy = "^3.3.0"
freezegun = "^1.2.2"
responses = "^0.24.1"
hypothesis = "^6.92.1"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.6"
black = "^23.11.0"
isort = "^5.12.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
bandit = "^1.7.5"
safety = "^2.3.5"
commitizen = "^3.13.0"
interrogate = "^1.5.0"
types-pyyaml = "^6.0.12.20250516"
types-requests = "^2.31.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocstrings = "^0.24.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/conftest.py",
    "*/test_*.py",
    "*/*_test.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract"
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--durations=10",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--maxfail=3",
    "--tb=short"
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, cross-component)",
    "slow: Tests taking >5 seconds",
    "external: Tests requiring external services/network",
    "git: Tests requiring git repository setup",
    "models: Tests for data models",
    "tools: Tests for tool implementations",
    "utils: Tests for utility functions",
    "config: Tests for configuration handling",
    "telemetry: Tests for telemetry functionality",
    "benchmark: Performance benchmark tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:git.*"
]
asyncio_mode = "auto"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Ruff Configuration
[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "S101"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy Configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
strict = false

[[tool.mypy.overrides]]
module = "mcp_shared_lib.test_utils.*"
disallow_untyped_defs = false
check_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
strict = false
ignore_errors = true

# Bandit Configuration
[tool.bandit]
exclude_dirs = ["tests"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]
